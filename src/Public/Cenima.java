/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Public;

import com.opencsv.CSVReader;
import com.opencsv.CSVWriter;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.Toolkit;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.Scanner;
import java.util.Set;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author yoges
 */
public class Cenima extends javax.swing.JFrame {

    String customerNameInfo;
    String customerMobileNoInfo;
    String customerMovieNameInfo;
    String movieDateInfo;
    String movieTimeInfo;
    String adultTicketPriceInfo;
    String seniorTicketPriceInfo;   
    String studentTicketPriceInfo;
    String ticketsSlots;
    String noOfAdultTicketsInfo;
    String noOfSeniorTicketsInfo;
    String noOfStudentTicketsInfo;
    String MovieIdInfo;
    String showMovieTimingId;
    String movieName;
    /**
     * Creates new form Cenima
     */
    public Cenima() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        menu = new javax.swing.JPanel();
        listMovies = new javax.swing.JButton();
        showTiming = new javax.swing.JButton();
        purchaseTicket = new javax.swing.JButton();
        showReceipt = new javax.swing.JButton();
        exit = new javax.swing.JButton();
        listMovieTable = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        showMovieTable = new javax.swing.JTable();
        genresFilter = new javax.swing.JComboBox<>();
        searchGenres = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        listShowTimePanel = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        showMovieTimeTable = new javax.swing.JTable();
        movieFilter = new javax.swing.JComboBox<>();
        searchGenres1 = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        showReceiptPanel = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        customerMobileNumber = new javax.swing.JComboBox<>();
        jLabel11 = new javax.swing.JLabel();
        savedCustomerName = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        custumerInfo = new javax.swing.JButton();
        movieShowTimeIdValues = new javax.swing.JComboBox<>();
        bookedDateInfo = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        bookedTimeInfo = new javax.swing.JTextField();
        perAdultTicketPriceInfo = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        amountPaidByCustomer = new javax.swing.JTextField();
        resetAllField = new javax.swing.JButton();
        MovieReceiptInfo = new javax.swing.JButton();
        printReceipt = new javax.swing.JButton();
        cancelBooking = new javax.swing.JButton();
        jLabel26 = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        perSeniorTicketPriceInfo = new javax.swing.JTextField();
        perStudentTicketPriceInfo = new javax.swing.JTextField();
        purchasedMovieName = new javax.swing.JTextField();
        jLabel18 = new javax.swing.JLabel();
        purchaseTicketPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        customerName = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        adultTicket = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        moviesList = new javax.swing.JComboBox<>();
        movieInfo = new javax.swing.JButton();
        moviesGenres = new javax.swing.JLabel();
        mobileNumber = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        calculateTicketPrice = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        noOfAdultTickets = new javax.swing.JTextField();
        saveData = new javax.swing.JButton();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        dateAvailabeList = new javax.swing.JComboBox<>();
        jLabel22 = new javax.swing.JLabel();
        dateInfo = new javax.swing.JButton();
        timeAvialableList = new javax.swing.JComboBox<>();
        timeInfo = new javax.swing.JButton();
        moviesGenresMovie = new javax.swing.JLabel();
        CNMNError = new javax.swing.JLabel();
        NoTError = new javax.swing.JLabel();
        totalAmount = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        seniorTicketPrice = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        studentTicketPrice = new javax.swing.JTextField();
        jLabel23 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        noOfSeniorTickets = new javax.swing.JTextField();
        noOfStudentTickets = new javax.swing.JTextField();
        availableTickets = new javax.swing.JTextField();
        jLabel25 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Cinema Ticket Machine");
        setBackground(new java.awt.Color(10, 7, 13));
        setPreferredSize(new java.awt.Dimension(600, 600));

        menu.setBackground(new java.awt.Color(255, 255, 153));
        menu.setToolTipText("");

        listMovies.setText("List Movies");
        listMovies.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listMoviesActionPerformed(evt);
            }
        });

        showTiming.setText("Show Timing");
        showTiming.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showTimingActionPerformed(evt);
            }
        });

        purchaseTicket.setText("Purchase Ticket");
        purchaseTicket.setToolTipText("");
        purchaseTicket.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                purchaseTicketActionPerformed(evt);
            }
        });

        showReceipt.setText("Show Receipt");
        showReceipt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showReceiptActionPerformed(evt);
            }
        });

        exit.setText("Exit");
        exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout menuLayout = new javax.swing.GroupLayout(menu);
        menu.setLayout(menuLayout);
        menuLayout.setHorizontalGroup(
            menuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(menuLayout.createSequentialGroup()
                .addComponent(listMovies)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(showTiming)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(purchaseTicket)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(showReceipt)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(exit)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        menuLayout.setVerticalGroup(
            menuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(menuLayout.createSequentialGroup()
                .addGroup(menuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(listMovies)
                    .addComponent(showTiming)
                    .addComponent(purchaseTicket)
                    .addComponent(showReceipt)
                    .addComponent(exit))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        listMovieTable.setBackground(new java.awt.Color(102, 255, 255));
        listMovieTable.setForeground(new java.awt.Color(255, 255, 255));
        listMovieTable.setVisible(false);

        showMovieTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Movie id", "Movie name", "Genres"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(showMovieTable);

        genresFilter.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        searchGenres.setBackground(new java.awt.Color(0, 0, 0));
        searchGenres.setFont(new java.awt.Font("Times New Roman", 0, 11)); // NOI18N
        searchGenres.setForeground(new java.awt.Color(255, 0, 0));
        searchGenres.setText("search");
        searchGenres.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchGenresActionPerformed(evt);
            }
        });

        jLabel4.setText("Filter By Genres");

        javax.swing.GroupLayout listMovieTableLayout = new javax.swing.GroupLayout(listMovieTable);
        listMovieTable.setLayout(listMovieTableLayout);
        listMovieTableLayout.setHorizontalGroup(
            listMovieTableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(listMovieTableLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(listMovieTableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 427, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(listMovieTableLayout.createSequentialGroup()
                        .addComponent(genresFilter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(searchGenres))
                    .addComponent(jLabel4))
                .addContainerGap(28, Short.MAX_VALUE))
        );
        listMovieTableLayout.setVerticalGroup(
            listMovieTableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, listMovieTableLayout.createSequentialGroup()
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 8, Short.MAX_VALUE)
                .addGroup(listMovieTableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(genresFilter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchGenres))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        listShowTimePanel.setBackground(new java.awt.Color(102, 255, 255));
        listShowTimePanel.setVisible(false);

        showMovieTimeTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Show Time id", "Movie id", "Movie name", "Date", "Time", "Adult Price", "Senior Price", "Student Price", "Avaialable Tickets"
            }
        ));
        jScrollPane2.setViewportView(showMovieTimeTable);

        movieFilter.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        searchGenres1.setBackground(new java.awt.Color(0, 0, 0));
        searchGenres1.setFont(new java.awt.Font("Times New Roman", 0, 11)); // NOI18N
        searchGenres1.setForeground(new java.awt.Color(255, 0, 0));
        searchGenres1.setText("search");
        searchGenres1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchGenres1ActionPerformed(evt);
            }
        });

        jLabel5.setText("Filter By Movies");

        javax.swing.GroupLayout listShowTimePanelLayout = new javax.swing.GroupLayout(listShowTimePanel);
        listShowTimePanel.setLayout(listShowTimePanelLayout);
        listShowTimePanelLayout.setHorizontalGroup(
            listShowTimePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(listShowTimePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(listShowTimePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(listShowTimePanelLayout.createSequentialGroup()
                        .addComponent(movieFilter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(searchGenres1))
                    .addComponent(jLabel5)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 927, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(49, Short.MAX_VALUE))
        );
        listShowTimePanelLayout.setVerticalGroup(
            listShowTimePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, listShowTimePanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(listShowTimePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(movieFilter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchGenres1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 344, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20))
        );

        showReceiptPanel.setBackground(new java.awt.Color(0, 255, 255));
        showReceiptPanel.setVisible(false);

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel9.setText("Print Receipt");

        jLabel10.setText("Mobile Number");

        customerMobileNumber.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        customerMobileNumber.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                customerMobileNumberActionPerformed(evt);
            }
        });

        jLabel11.setText("Customer Name");

        savedCustomerName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                savedCustomerNameActionPerformed(evt);
            }
        });

        jLabel12.setText("Select Movie Show Id");

        custumerInfo.setBackground(new java.awt.Color(102, 255, 102));
        custumerInfo.setText("Submit");
        custumerInfo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                custumerInfoActionPerformed(evt);
            }
        });

        movieShowTimeIdValues.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        movieShowTimeIdValues.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                movieShowTimeIdValuesActionPerformed(evt);
            }
        });

        bookedDateInfo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bookedDateInfoActionPerformed(evt);
            }
        });

        jLabel15.setText("Date");

        jLabel16.setText("Time");

        bookedTimeInfo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bookedTimeInfoActionPerformed(evt);
            }
        });

        perAdultTicketPriceInfo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                perAdultTicketPriceInfoActionPerformed(evt);
            }
        });

        jLabel17.setText("Adult Ticket");

        jLabel19.setText("Amount Paid");

        amountPaidByCustomer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                amountPaidByCustomerActionPerformed(evt);
            }
        });

        resetAllField.setBackground(new java.awt.Color(102, 255, 102));
        resetAllField.setText("Reset");
        resetAllField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetAllFieldActionPerformed(evt);
            }
        });

        MovieReceiptInfo.setBackground(new java.awt.Color(102, 255, 102));
        MovieReceiptInfo.setText("Submit");
        MovieReceiptInfo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MovieReceiptInfoActionPerformed(evt);
            }
        });

        printReceipt.setBackground(new java.awt.Color(102, 255, 102));
        printReceipt.setText("Print");
        printReceipt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printReceiptActionPerformed(evt);
            }
        });

        cancelBooking.setBackground(new java.awt.Color(102, 255, 102));
        cancelBooking.setText("Cancel Booking");
        cancelBooking.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelBookingActionPerformed(evt);
            }
        });

        jLabel26.setText("Senior Ticket");

        jLabel27.setText("Student Ticket");

        perSeniorTicketPriceInfo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                perSeniorTicketPriceInfoActionPerformed(evt);
            }
        });

        perStudentTicketPriceInfo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                perStudentTicketPriceInfoActionPerformed(evt);
            }
        });

        purchasedMovieName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                purchasedMovieNameActionPerformed(evt);
            }
        });

        jLabel18.setText(" Movie Name");

        javax.swing.GroupLayout showReceiptPanelLayout = new javax.swing.GroupLayout(showReceiptPanel);
        showReceiptPanel.setLayout(showReceiptPanelLayout);
        showReceiptPanelLayout.setHorizontalGroup(
            showReceiptPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(showReceiptPanelLayout.createSequentialGroup()
                .addGroup(showReceiptPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(showReceiptPanelLayout.createSequentialGroup()
                        .addGap(129, 129, 129)
                        .addComponent(jLabel10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(customerMobileNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(showReceiptPanelLayout.createSequentialGroup()
                        .addGap(158, 158, 158)
                        .addComponent(jLabel9))
                    .addGroup(showReceiptPanelLayout.createSequentialGroup()
                        .addGap(147, 147, 147)
                        .addComponent(custumerInfo))
                    .addGroup(showReceiptPanelLayout.createSequentialGroup()
                        .addGap(122, 122, 122)
                        .addGroup(showReceiptPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel12)
                            .addComponent(jLabel11)
                            .addComponent(MovieReceiptInfo))
                        .addGap(18, 18, 18)
                        .addGroup(showReceiptPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(movieShowTimeIdValues, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(savedCustomerName, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(showReceiptPanelLayout.createSequentialGroup()
                        .addGap(86, 86, 86)
                        .addGroup(showReceiptPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel15)
                            .addComponent(jLabel16)
                            .addComponent(jLabel17)
                            .addComponent(jLabel19)
                            .addComponent(jLabel26)
                            .addComponent(jLabel27)
                            .addComponent(jLabel18))
                        .addGap(18, 18, 18)
                        .addGroup(showReceiptPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(bookedTimeInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(bookedDateInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(perAdultTicketPriceInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(amountPaidByCustomer, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(perSeniorTicketPriceInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(perStudentTicketPriceInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(purchasedMovieName, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(showReceiptPanelLayout.createSequentialGroup()
                        .addGap(134, 134, 134)
                        .addGroup(showReceiptPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(showReceiptPanelLayout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(cancelBooking))
                            .addGroup(showReceiptPanelLayout.createSequentialGroup()
                                .addComponent(resetAllField)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(printReceipt)))))
                .addContainerGap(83, Short.MAX_VALUE))
        );
        showReceiptPanelLayout.setVerticalGroup(
            showReceiptPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(showReceiptPanelLayout.createSequentialGroup()
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(showReceiptPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(customerMobileNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10))
                .addGap(16, 16, 16)
                .addComponent(custumerInfo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(showReceiptPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(savedCustomerName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(showReceiptPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(movieShowTimeIdValues, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(MovieReceiptInfo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(showReceiptPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel15)
                    .addComponent(bookedDateInfo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(showReceiptPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bookedTimeInfo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel16))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 14, Short.MAX_VALUE)
                .addGroup(showReceiptPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(purchasedMovieName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel18))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(showReceiptPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(perAdultTicketPriceInfo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(showReceiptPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel26, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(perSeniorTicketPriceInfo, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(showReceiptPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(perStudentTicketPriceInfo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel27, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(showReceiptPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(amountPaidByCustomer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel19))
                .addGap(18, 18, 18)
                .addGroup(showReceiptPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(resetAllField)
                    .addComponent(printReceipt))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cancelBooking)
                .addGap(35, 35, 35))
        );

        purchaseTicketPanel.setBackground(new java.awt.Color(102, 255, 255));
        purchaseTicketPanel.setVisible(false);

        jLabel1.setText("Customer Name");

        customerName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                customerNameActionPerformed(evt);
            }
        });

        jLabel2.setText("Mobile Number");

        adultTicket.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                adultTicketActionPerformed(evt);
            }
        });

        jLabel3.setText("Select Movie");

        moviesList.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        moviesList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moviesListActionPerformed(evt);
            }
        });

        movieInfo.setBackground(new java.awt.Color(102, 255, 102));
        movieInfo.setText("Submit");
        movieInfo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                movieInfoActionPerformed(evt);
            }
        });

        moviesGenres.setText("genres");

        mobileNumber.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mobileNumberActionPerformed(evt);
            }
        });
        mobileNumber.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                mobileNumberKeyPressed(evt);
            }
        });

        jLabel6.setText("Adult Ticket Price");

        jLabel7.setText("Number of Adult Ticket");

        calculateTicketPrice.setBackground(new java.awt.Color(102, 255, 102));
        calculateTicketPrice.setText("Submit");
        calculateTicketPrice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                calculateTicketPriceActionPerformed(evt);
            }
        });

        jLabel8.setText("Total Amount");

        noOfAdultTickets.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                noOfAdultTicketsActionPerformed(evt);
            }
        });

        saveData.setBackground(new java.awt.Color(102, 255, 102));
        saveData.setText("Pay");
        saveData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveDataActionPerformed(evt);
            }
        });

        jLabel20.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel20.setText("Purchase Movie Tickets");

        jLabel21.setText("Date");

        dateAvailabeList.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        dateAvailabeList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dateAvailabeListActionPerformed(evt);
            }
        });

        jLabel22.setText("Time");

        dateInfo.setBackground(new java.awt.Color(102, 255, 102));
        dateInfo.setText("Submit");
        dateInfo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dateInfoActionPerformed(evt);
            }
        });

        timeAvialableList.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        timeAvialableList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                timeAvialableListActionPerformed(evt);
            }
        });

        timeInfo.setBackground(new java.awt.Color(102, 255, 102));
        timeInfo.setText("Submit");
        timeInfo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                timeInfoActionPerformed(evt);
            }
        });

        moviesGenresMovie.setText("                    ");

        CNMNError.setForeground(new java.awt.Color(255, 0, 0));
        CNMNError.setText("             ");

        NoTError.setForeground(new java.awt.Color(255, 0, 0));
        NoTError.setText("             ");

        jLabel13.setText("Senior Ticket Price");

        seniorTicketPrice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                seniorTicketPriceActionPerformed(evt);
            }
        });

        jLabel14.setText("Student Ticket Price");

        studentTicketPrice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                studentTicketPriceActionPerformed(evt);
            }
        });

        jLabel23.setText("Number of Senior Ticket");

        jLabel24.setText("Number of Student Ticket");

        noOfSeniorTickets.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                noOfSeniorTicketsActionPerformed(evt);
            }
        });

        noOfStudentTickets.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                noOfStudentTicketsActionPerformed(evt);
            }
        });

        availableTickets.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                availableTicketsActionPerformed(evt);
            }
        });

        jLabel25.setText("Available Tickets");

        javax.swing.GroupLayout purchaseTicketPanelLayout = new javax.swing.GroupLayout(purchaseTicketPanel);
        purchaseTicketPanel.setLayout(purchaseTicketPanelLayout);
        purchaseTicketPanelLayout.setHorizontalGroup(
            purchaseTicketPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(purchaseTicketPanelLayout.createSequentialGroup()
                .addGroup(purchaseTicketPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(purchaseTicketPanelLayout.createSequentialGroup()
                        .addGap(104, 104, 104)
                        .addGroup(purchaseTicketPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(moviesGenres)
                            .addComponent(jLabel1)
                            .addComponent(jLabel3)
                            .addComponent(jLabel22)
                            .addComponent(jLabel21))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(purchaseTicketPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(moviesList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(dateAvailabeList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(timeAvialableList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(customerName, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(moviesGenresMovie)))
                    .addGroup(purchaseTicketPanelLayout.createSequentialGroup()
                        .addGap(105, 105, 105)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(mobileNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(purchaseTicketPanelLayout.createSequentialGroup()
                        .addGap(149, 149, 149)
                        .addComponent(jLabel20))
                    .addGroup(purchaseTicketPanelLayout.createSequentialGroup()
                        .addGap(140, 140, 140)
                        .addGroup(purchaseTicketPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(dateInfo)
                            .addGroup(purchaseTicketPanelLayout.createSequentialGroup()
                                .addComponent(movieInfo)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(CNMNError, javax.swing.GroupLayout.PREFERRED_SIZE, 243, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(timeInfo)))
                    .addGroup(purchaseTicketPanelLayout.createSequentialGroup()
                        .addGroup(purchaseTicketPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(purchaseTicketPanelLayout.createSequentialGroup()
                                .addGap(65, 65, 65)
                                .addGroup(purchaseTicketPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel13)
                                    .addComponent(jLabel6)
                                    .addComponent(jLabel14)
                                    .addComponent(jLabel24)
                                    .addComponent(calculateTicketPrice)
                                    .addGroup(purchaseTicketPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel7)
                                        .addComponent(jLabel23))))
                            .addComponent(jLabel25, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(purchaseTicketPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(noOfAdultTickets, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(purchaseTicketPanelLayout.createSequentialGroup()
                                .addComponent(seniorTicketPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(NoTError))
                            .addComponent(adultTicket, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(studentTicketPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(noOfSeniorTickets, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(noOfStudentTickets, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(availableTickets, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(purchaseTicketPanelLayout.createSequentialGroup()
                        .addGap(121, 121, 121)
                        .addGroup(purchaseTicketPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(saveData)
                            .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(totalAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(41, Short.MAX_VALUE))
        );
        purchaseTicketPanelLayout.setVerticalGroup(
            purchaseTicketPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(purchaseTicketPanelLayout.createSequentialGroup()
                .addComponent(jLabel20)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(purchaseTicketPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(customerName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(purchaseTicketPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(mobileNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(purchaseTicketPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(moviesList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(purchaseTicketPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(movieInfo)
                    .addComponent(CNMNError))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(purchaseTicketPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(moviesGenres)
                    .addComponent(moviesGenresMovie))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(purchaseTicketPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel21)
                    .addComponent(dateAvailabeList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(dateInfo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(purchaseTicketPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel22)
                    .addComponent(timeAvialableList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(timeInfo)
                .addGroup(purchaseTicketPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(purchaseTicketPanelLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(purchaseTicketPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(adultTicket, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(purchaseTicketPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(NoTError)
                            .addComponent(seniorTicketPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel13))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(purchaseTicketPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(studentTicketPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel14))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(purchaseTicketPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(availableTickets, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel25))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(purchaseTicketPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(noOfAdultTickets, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(purchaseTicketPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(noOfSeniorTickets, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel23))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(purchaseTicketPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel24)
                            .addComponent(noOfStudentTickets, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(calculateTicketPrice)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel8))
                    .addGroup(purchaseTicketPanelLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(totalAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(saveData)
                .addGap(8, 8, 8))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(listMovieTable, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(menu, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(purchaseTicketPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(showReceiptPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(listShowTimePanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(menu, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(listMovieTable, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(listShowTimePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(purchaseTicketPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(showReceiptPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void exitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitActionPerformed
        // TODO add your handling code here:
        //listMovieTable.setVisible(false);
        JOptionPane.showMessageDialog(this,"Exit","WARNING",JOptionPane.WARNING_MESSAGE);
        this.dispose();
    }//GEN-LAST:event_exitActionPerformed

    private void showReceiptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showReceiptActionPerformed
        // TODO add your handling code here:
        try
        {   
            listMovieTable.setVisible(false);
            listShowTimePanel.setVisible(false);
            purchaseTicketPanel.setVisible(false);
            showReceiptPanel.setVisible(true);
            resetPrintReceipt();
            ArrayList<ArrayList> purchaseTicket=getPurchaseDetails();
            Set<String> hash_Set = new HashSet<String>();
            for(int i=0;i<purchaseTicket.size();i++)
            {
                ArrayList<String> customerInfo=purchaseTicket.get(i);
                hash_Set.add(customerInfo.get(1));
            }
            Object[] detailMobile=hash_Set.toArray();
            String[] customerMobileNum=new String[detailMobile.length];
            for(int i=0;i<detailMobile.length;i++)
            {
                customerMobileNum[i]=detailMobile[i].toString();
            }
            if(customerMobileNum.length<1)
            {
                showReceiptPanel.setVisible(false);
                JOptionPane.showMessageDialog(this,"No Data Found","WARNING",JOptionPane.WARNING_MESSAGE);
            }
            DefaultComboBoxModel<String> model = new DefaultComboBoxModel<String>(customerMobileNum);
            customerMobileNumber.setModel(model);
        }
        catch(Exception e)
        {
            System.out.println(e);
        }
    }//GEN-LAST:event_showReceiptActionPerformed

    public ArrayList getPurchaseDetails()
    {
        String fileName="PurchaseTicket.csv";
        ArrayList<ArrayList> purchaseTicket=new ArrayList<ArrayList>();
        try
        {
            Path currRelativePath = Paths.get("");
            String currAbsolutePathString = currRelativePath.toAbsolutePath().toString();
            FileReader readFile=new FileReader(currAbsolutePathString+"/src/Public/"+fileName);
            CSVReader reader =new CSVReader(readFile); 
            String [] nextLine;  
            //reads one line at a time  
            String[] header = reader.readNext();
            while ((nextLine = reader.readNext()) != null)  
            {
                if(nextLine.length>0)
                {
                    ArrayList<String> custumerInfo=new ArrayList<String>();  
                    for(int i=0;i<nextLine.length;i++)
                    {
                        custumerInfo.add(nextLine[i]);
                    }
                    purchaseTicket.add(custumerInfo);
                }
            }  
        }
        catch(FileNotFoundException e)
        {
            JOptionPane.showMessageDialog(this,"File Not Found","File Not Found",JOptionPane.WARNING_MESSAGE);
        }
        catch(IOException e)
        {
            System.out.println(e.getMessage());
        }
        catch(Exception e)
        {
            System.out.println(e);
        }
        return purchaseTicket;
    }
    private void purchaseTicketActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_purchaseTicketActionPerformed
        // TODO add your handling code here:
        this.setSize(600, 600);
        clearField();
        listMovieTable.setVisible(false);
        listShowTimePanel.setVisible(false);
        purchaseTicketPanel.setVisible(true);
        showReceiptPanel.setVisible(false);
        moviesGenres.setVisible(false);
        moviesGenresMovie.setVisible(false);
        jLabel21.setVisible(false);
        dateAvailabeList.setVisible(false);
        dateInfo.setVisible(false);
        jLabel22.setVisible(false);
        timeAvialableList.setVisible(false);
        timeInfo.setVisible(false);
        jLabel6.setVisible(false);
       adultTicket.setVisible(false);
        jLabel7.setVisible(false);
        noOfAdultTickets.setVisible(false);
        calculateTicketPrice.setVisible(false);
        jLabel8.setVisible(false);
        totalAmount.setVisible(false);
        saveData.setVisible(false);
        adultTicket.setVisible(false);
        seniorTicketPrice.setVisible(false);
        studentTicketPrice.setVisible(false);
        availableTickets.setVisible(false);
        jLabel13.setVisible(false);
        jLabel14.setVisible(false);
        jLabel24.setVisible(false);
        jLabel23.setVisible(false);
        jLabel25.setVisible(false);
        noOfSeniorTickets.setVisible(false);
        noOfStudentTickets.setVisible(false);
        String fileName="ListMovies.csv";
        ArrayList<ArrayList> listMovies=new ArrayList<ArrayList>();
        try
        {
            Path currRelativePath = Paths.get("");
            String currAbsolutePathString = currRelativePath.toAbsolutePath().toString();
            FileReader readFile=new FileReader(currAbsolutePathString+"/src/Public/"+fileName);
            CSVReader reader =new CSVReader(readFile); 
            String [] nextLine;  
            //reads one line at a time  
            String[] header = reader.readNext();
            while ((nextLine = reader.readNext()) != null)  
            {
                if(nextLine.length>0)
                {
                    ArrayList<String> showTimeInfo=new ArrayList<String>();  
                    for(int i=0;i<nextLine.length;i++)
                    {
                        showTimeInfo.add(nextLine[i]);
                    }  
                    listMovies.add(showTimeInfo);
                }
            }  
            String[] arrayMovie=new String[listMovies.size()];
            for(int i=0;i<listMovies.size();i++)
            {
                ArrayList<String> movieNames=listMovies.get(i);
                arrayMovie[i]=movieNames.get(1);
            }
            DefaultComboBoxModel<String> model = new DefaultComboBoxModel<String>( arrayMovie );
            moviesList.setModel( model );
        }
        catch(FileNotFoundException e)
        {
            System.out.println("File Not found");
        }
        catch(IOException e)
        {
            System.out.println(e.getMessage());
        }
        catch(Exception e)
        {
            System.out.println(e);
        }
    }//GEN-LAST:event_purchaseTicketActionPerformed

    private void showTimingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showTimingActionPerformed
        // TODO add your handling code here:
        this.setSize(600, 600);
        listMovieTable.setVisible(false);
        listShowTimePanel.setVisible(true);
        purchaseTicketPanel.setVisible(false);
        showReceiptPanel.setVisible(false);
        String fileName="ListShowTime.csv";
        ArrayList<ArrayList> listShow=new ArrayList<ArrayList>();
        try
        {
            Path currRelativePath = Paths.get("");
            String currAbsolutePathString = currRelativePath.toAbsolutePath().toString();
            FileReader readFile=new FileReader(currAbsolutePathString+"/src/Public/"+fileName);
            CSVReader reader =new CSVReader(readFile); 
            String [] nextLine;  
            //reads one line at a time  
            String[] header = reader.readNext();
            Set<String> moviesList=new HashSet<String>();
            while ((nextLine = reader.readNext()) != null)  
            {
                if(nextLine.length>0)
                {
                    ArrayList<String> showTimeInfo=new ArrayList<String>();  
                    for(int i=0;i<nextLine.length;i++)
                    {
                        showTimeInfo.add(nextLine[i]);
                    }
                    moviesList.add(nextLine[2]);
                    listShow.add(showTimeInfo);
                }
            }  
            Object[] timingDetails=moviesList.toArray();
            String[] showTimeData=new String[timingDetails.length];
            for(int i=0;i<timingDetails.length;i++)
            {
                showTimeData[i]=timingDetails[i].toString();
            }
            DefaultComboBoxModel<String> model = new DefaultComboBoxModel<String>(showTimeData);
            movieFilter.setModel(model);
            //String[] columnNames = { "Movie id", "Movie name", "Genres" };
            //String[][] rowValues=new String[(listMovies.size())][3];
            //DefaultTableModel dtm = new DefaultTableModel(3, 0);
            for(int i=0;i<listShow.size();i++) 
            {
                ArrayList<String> values=listShow.get(i);
                String[] valuesMovies=new String[values.size()];
                for(int j=0;j<values.size();j++)
                {
                    //rowValues[i][j]=values.get(j);
                    String val=values.get(j);
                    //valuesMovies[i]=val;
                    showMovieTimeTable.setValueAt(val, i,j);
                }
            }
        }
        catch(FileNotFoundException e)
        {
            System.out.println("File Not found");
        }
        catch(IOException e)
        {
            System.out.println(e.getMessage());
        }
        catch(Exception e)
        {
            System.out.println(e);
        }
    }//GEN-LAST:event_showTimingActionPerformed

    private void listMoviesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listMoviesActionPerformed
        // TODO add your handling code here:
        this.setSize(600, 600);
        listMovieTable.setVisible(true);
        listShowTimePanel.setVisible(false);
        purchaseTicketPanel.setVisible(false);
        showReceiptPanel.setVisible(false);
        String fileName="ListMovies.csv";
        ArrayList<ArrayList> listMovies=new ArrayList<ArrayList>();
        Set<String> genres=new HashSet<String>();
        try
        {
            Path currRelativePath = Paths.get("");
            String currAbsolutePathString = currRelativePath.toAbsolutePath().toString();
            FileReader readFile=new FileReader(currAbsolutePathString+"/src/Public/"+fileName);
            CSVReader reader =new CSVReader(readFile); 
            String [] nextLine;  
            //reads one line at a time  
            String[] header = reader.readNext();
            while ((nextLine = reader.readNext()) != null)  
            {
                if(nextLine.length>0)
                {
                    ArrayList<String> movieInfo=new ArrayList<String>();  
                    for(int i=0;i<nextLine.length;i++)
                    {
                        movieInfo.add(nextLine[i]);
                    }  
                    genres.add(nextLine[nextLine.length-1]);
                    listMovies.add(movieInfo);
                }
            }  
            Object[] genresDetails=genres.toArray();
            String[] genresData=new String[genresDetails.length];
            for(int i=0;i<genresDetails.length;i++)
            {
                genresData[i]=genresDetails[i].toString();
            }
            DefaultComboBoxModel<String> model = new DefaultComboBoxModel<String>(genresData);
            genresFilter.setModel(model);
            String[] columnNames = { "Movie id", "Movie name", "Genres" };
            //String[][] rowValues=new String[(listMovies.size())][3];
            DefaultTableModel dtm = new DefaultTableModel(3, 0);
            for(int i=0;i<listMovies.size();i++) 
            {
                ArrayList<String> values=listMovies.get(i);
                String[] valuesMovies=new String[values.size()];
                for(int j=0;j<values.size();j++)
                {
                    //rowValues[i][j]=values.get(j);
                    String val=values.get(j);
                    //valuesMovies[i]=val;
                    showMovieTable.setValueAt(val, i,j);
                }
                //dtm.addRow(valuesMovies);
            }
        }
        catch(FileNotFoundException e)
        {
            System.out.println("File Not found");
        }
        catch(IOException e)
        {
            System.out.println(e.getMessage());
        }
        catch(Exception e)
        {
            System.out.println(e);
        }
        
        //showMovieTable.setV
    }//GEN-LAST:event_listMoviesActionPerformed

    private void customerMobileNumberActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_customerMobileNumberActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_customerMobileNumberActionPerformed

    private void savedCustomerNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_savedCustomerNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_savedCustomerNameActionPerformed

    private void movieShowTimeIdValuesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_movieShowTimeIdValuesActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_movieShowTimeIdValuesActionPerformed

    private void bookedDateInfoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bookedDateInfoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_bookedDateInfoActionPerformed

    private void bookedTimeInfoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bookedTimeInfoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_bookedTimeInfoActionPerformed

    private void perAdultTicketPriceInfoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_perAdultTicketPriceInfoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_perAdultTicketPriceInfoActionPerformed

    private void custumerInfoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_custumerInfoActionPerformed
        // TODO add your handling code here:
        ArrayList<ArrayList> purchaseTicket=getPurchaseDetails();
        customerMobileNoInfo=customerMobileNumber.getSelectedItem().toString();
        for(int i=0;i<purchaseTicket.size();i++)
        {
            ArrayList<String> customerInfo=purchaseTicket.get(i);
            if(customerInfo.get(1).equals(customerMobileNoInfo))
            {
                customerNameInfo=customerInfo.get(0);
                break;
            }
        }
        savedCustomerName.setText(customerNameInfo);
        Set<String> hash_Set = new HashSet<String>();
        for(int i=0;i<purchaseTicket.size();i++)
        {
            ArrayList<String> customerInfo=purchaseTicket.get(i);
            if(customerInfo.get(1).equals(customerMobileNoInfo))
            {
                hash_Set.add(customerInfo.get(2));
            }
        }
        Object[] showTimeValuesInObject=hash_Set.toArray(); 
        String[] showTimeIdValues=new String[showTimeValuesInObject.length];
        for(int i=0;i<showTimeValuesInObject.length;i++)
        {
            showTimeIdValues[i]=(String)showTimeValuesInObject[i];
        }
        DefaultComboBoxModel<String> model = new DefaultComboBoxModel<String>(showTimeIdValues);
        movieShowTimeIdValues.setModel(model);
    }//GEN-LAST:event_custumerInfoActionPerformed

    private void amountPaidByCustomerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_amountPaidByCustomerActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_amountPaidByCustomerActionPerformed

    private void resetAllFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetAllFieldActionPerformed
        // TODO add your handling code here:
        resetPrintReceipt();
    }//GEN-LAST:event_resetAllFieldActionPerformed

    public void resetPrintReceipt()
    {
        savedCustomerName.setText(null);
        bookedDateInfo.setText(null);
        bookedTimeInfo.setText(null);
        perAdultTicketPriceInfo.setText(null);
        perSeniorTicketPriceInfo.setText(null);
        perStudentTicketPriceInfo.setText(null);
        amountPaidByCustomer.setText(null);
        purchasedMovieName.setText(null);
    }
    private void MovieReceiptInfoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MovieReceiptInfoActionPerformed
        // TODO add your handling code here:
        showMovieTimingId=movieShowTimeIdValues.getSelectedItem().toString();
        ArrayList<ArrayList> purchaseTicket=getPurchaseDetails();
        for(int i=0;i<purchaseTicket.size();i++)
        {
            ArrayList<String> customerInfo=purchaseTicket.get(i);
            if(showMovieTimingId.equals(customerInfo.get(2)))
            {
                perAdultTicketPriceInfo.setText(customerInfo.get(3));
                perSeniorTicketPriceInfo.setText(customerInfo.get(4));
                perStudentTicketPriceInfo.setText(customerInfo.get(5));
                amountPaidByCustomer.setText(customerInfo.get(6));
                noOfAdultTicketsInfo=customerInfo.get(3);
                noOfSeniorTicketsInfo=customerInfo.get(4);
                noOfStudentTicketsInfo=customerInfo.get(5);
                break;
            }
        }
        ArrayList<ArrayList> listShow=getShowTime();
        for(int i=0;i<listShow.size();i++)
        {
            ArrayList<String> showTiming=listShow.get(i);
            if(showMovieTimingId.equals(showTiming.get(0)))
            {
                movieName=showTiming.get(2);
                movieDateInfo=showTiming.get(3);
                movieTimeInfo=showTiming.get(4);
                adultTicketPriceInfo=showTiming.get(5);
                bookedDateInfo.setText(movieDateInfo);
                bookedTimeInfo.setText(movieTimeInfo);
                purchasedMovieName.setText(movieName);
                break;
            }
        }
    }//GEN-LAST:event_MovieReceiptInfoActionPerformed

    private void timeInfoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_timeInfoActionPerformed
        // TODO add your handling code here:
        noOfSeniorTickets.setVisible(true);
        noOfStudentTickets.setVisible(true);
        availableTickets.setVisible(true);
        jLabel13.setVisible(true);
        jLabel14.setVisible(true);
        jLabel24.setVisible(true);
        jLabel23.setVisible(true);
        jLabel25.setVisible(true);
        adultTicket.setVisible(true);
        seniorTicketPrice.setVisible(true);
        studentTicketPrice.setVisible(true);
        jLabel6.setVisible(true);
        adultTicket.setVisible(true);
        jLabel7.setVisible(true);
        noOfAdultTickets.setVisible(true);
        calculateTicketPrice.setVisible(true);
        noOfAdultTickets.setText("0");
        noOfSeniorTickets.setText("0");
        noOfStudentTickets.setText("0");
        movieTimeInfo=timeAvialableList.getSelectedItem().toString();
        ArrayList<ArrayList> listShow=getShowTime();
        for(int i=0;i<listShow.size();i++)
        {
            ArrayList<String> showTiming=listShow.get(i);
            if(MovieIdInfo.equals(showTiming.get(1)) && movieDateInfo.equals(showTiming.get(3)) && movieTimeInfo.equals(showTiming.get(4)))
            {
                showMovieTimingId=showTiming.get(0);
                adultTicketPriceInfo=showTiming.get(5);
                seniorTicketPriceInfo=showTiming.get(6);
                studentTicketPriceInfo=showTiming.get(7);
                ticketsSlots=showTiming.get(8);
                break;
            }
        }
        adultTicket.setText(adultTicketPriceInfo);
        seniorTicketPrice.setText(seniorTicketPriceInfo);
        studentTicketPrice.setText(studentTicketPriceInfo);
        availableTickets.setText(ticketsSlots);
    }//GEN-LAST:event_timeInfoActionPerformed

    private void timeAvialableListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_timeAvialableListActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_timeAvialableListActionPerformed

    private void dateInfoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dateInfoActionPerformed
        // TODO add your handling code here:

        jLabel22.setVisible(true);
        timeAvialableList.setVisible(true);
        timeInfo.setVisible(true);
        movieDateInfo=dateAvailabeList.getSelectedItem().toString();
        ArrayList<ArrayList> listShow=getShowTime();
        int count =0;
        for(int i=0;i<listShow.size();i++)
        {
            ArrayList<String> showTiming=listShow.get(i);
            if(MovieIdInfo.equals(showTiming.get(1)) && movieDateInfo.equals(showTiming.get(3)))
            {
                count++;
            }
        }
        String[] timeArray=new String[count];
        count=0;
        for(int i=0;i<listShow.size();i++)
        {
            ArrayList<String> showTiming=listShow.get(i);
            if(MovieIdInfo.equals(showTiming.get(1)) && movieDateInfo.equals(showTiming.get(3)))
            {
                timeArray[count]=showTiming.get(4);
                count++;
            }
        }
        DefaultComboBoxModel<String> model = new DefaultComboBoxModel<String>(timeArray);
        timeAvialableList.setModel(model);
    }//GEN-LAST:event_dateInfoActionPerformed

    private void dateAvailabeListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dateAvailabeListActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_dateAvailabeListActionPerformed

    private void saveDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveDataActionPerformed
        // TODO add your handling code here:
        String amountPaidForTicket=totalAmount.getText();
        String avaialbelslot=ticketsSlots;
        String fileName="PurchaseTicket.csv";
        Path currRelativePath = Paths.get("");
        String currAbsolutePathString = currRelativePath.toAbsolutePath().toString();
        String filePath=(currAbsolutePathString+"/src/Public/"+fileName);
        File file = new File(filePath);
        int amt=Integer.parseInt(amountPaidForTicket);
        if(Integer.parseInt(avaialbelslot)>0)
        {
            if(amt>0)
            {
                try {
                    // create FileWriter object with file as parameter
                    FileWriter outputfile = new FileWriter(file,true);

                    // create CSVWriter object filewriter object as parameter
                    CSVWriter writer = new CSVWriter(outputfile);
                    // add data to csv
                    String[] data1 = {customerNameInfo,customerMobileNoInfo,showMovieTimingId,noOfAdultTicketsInfo,noOfSeniorTicketsInfo,noOfStudentTicketsInfo,amountPaidForTicket};
                    writer.writeNext(data1);
                    // closing writer connection
                    writer.close();
                    updateSlots();
                    JOptionPane.showMessageDialog(this,"Ticket Booked.","Ticket Booked",JOptionPane.WARNING_MESSAGE);
                    clearField();
                }
                catch (IOException e) {
                    // TODO Auto-generated catch block
                    e.printStackTrace();
                }
            }
            else
            {
                JOptionPane.showMessageDialog(this,"Number of Ticket Should be more than zero","Number of Ticket Should be more than zero",JOptionPane.WARNING_MESSAGE);
            }
        }   
        else
        {
            JOptionPane.showMessageDialog(this,"No available Tickets","No available Tickets",JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_saveDataActionPerformed

    public void updateSlots()
    {
        String avaialbelslot=ticketsSlots;
        String adulttic=noOfAdultTicketsInfo;
        String seniortic=noOfSeniorTicketsInfo;
        String studenttic=noOfStudentTicketsInfo;
        String showId=showMovieTimingId;
        int totaltic=Integer.parseInt(adulttic)+Integer.parseInt(seniortic)+Integer.parseInt(studenttic);
        String remainTick=(Integer.parseInt(avaialbelslot)-totaltic)+"";
        String fileName="ListShowTime.csv";
        ArrayList<ArrayList> listShow=new ArrayList<ArrayList>();
        try
        {
            Path currRelativePath = Paths.get("");
            String currAbsolutePathString = currRelativePath.toAbsolutePath().toString();
            FileReader readFile=new FileReader(currAbsolutePathString+"/src/Public/"+fileName);
            CSVReader reader =new CSVReader(readFile); 
            String [] nextLine;  
            //reads one line at a time  
            String[] header = reader.readNext();
            while ((nextLine = reader.readNext()) != null)  
            {
                if(nextLine.length>0)
                {
                    ArrayList<String> showTimeInfo=new ArrayList<String>();  
                    for(int i=0;i<nextLine.length;i++)
                    {
                        showTimeInfo.add(nextLine[i]);
                    }  
                    listShow.add(showTimeInfo);
                }
            }  
            //String[] columnNames = { "Movie id", "Movie name", "Genres" };
            //String[][] rowValues=new String[(listMovies.size())][3];
            //DefaultTableModel dtm = new DefaultTableModel(3, 0);
            for(int i=0;i<listShow.size();i++) 
            {
                ArrayList<String> values=listShow.get(i);
                if(values.get(0).equals(showId))
                {
                    values.set(8,remainTick);
                }
            }

            UpdateData(listShow);
        }
        catch(FileNotFoundException e)
        {
            System.out.println("File Not found");
        }
        catch(IOException e)
        {
            System.out.println(e.getMessage());
        }
        catch(Exception e)
        {
            System.out.println(e);
        }

    }

    public void UpdateData(ArrayList<ArrayList> arraylist)
    {
        String fileName="ListShowTime.csv";
        Path currRelativePath = Paths.get("");
        String currAbsolutePathString = currRelativePath.toAbsolutePath().toString();
        String filePath=(currAbsolutePathString+"/src/Public/"+fileName);
        File file = new File(filePath);
        try {
            // create FileWriter object with file as parameter
            FileWriter outputfile = new FileWriter(file);

            // create CSVWriter object filewriter object as parameter
            CSVWriter writer = new CSVWriter(outputfile);
            // add data to csv
            String[] data1 = {"Show Time id","Movie id","name","date","time","Adult Price","Senior Price","Student Price","Available Tickets"};
            writer.writeNext(data1);
            for(int i=0;i<arraylist.size();i++)
            {
                ArrayList<String> showInfo=arraylist.get(i);
                String[] sInfo={showInfo.get(0),showInfo.get(1),showInfo.get(2),showInfo.get(3),showInfo.get(4),showInfo.get(5),showInfo.get(6),showInfo.get(7),showInfo.get(8)};
                writer.writeNext(sInfo);
            }
            // closing writer connection
            writer.close();
        }
        catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }

    private void noOfAdultTicketsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_noOfAdultTicketsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_noOfAdultTicketsActionPerformed

    private void calculateTicketPriceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_calculateTicketPriceActionPerformed
        // TODO add your handling code here:
        try
        {
            if(noOfAdultTickets.getText().length() > 0){
                jLabel8.setVisible(true);
                totalAmount.setVisible(true);
                saveData.setVisible(true);
                NoTError.setText("");
                noOfAdultTicketsInfo=noOfAdultTickets.getText();
                noOfSeniorTicketsInfo=noOfSeniorTickets.getText();
                noOfStudentTicketsInfo=noOfStudentTickets.getText();
                if(Integer.parseInt(noOfAdultTicketsInfo)>0 || Integer.parseInt(noOfSeniorTicketsInfo)>0 || Integer.parseInt(noOfStudentTicketsInfo)>0)
                {
                    int totalAdult=Integer.parseInt(noOfAdultTicketsInfo)*Integer.parseInt(adultTicketPriceInfo);
                    int totalSenior=Integer.parseInt(noOfSeniorTicketsInfo)*Integer.parseInt(seniorTicketPriceInfo);
                    int totalStudent=Integer.parseInt(noOfStudentTicketsInfo)*Integer.parseInt(studentTicketPriceInfo);
                    int totalAmountTicket=totalAdult+totalSenior+totalStudent;
                    totalAmount.setText(totalAmountTicket+"");
                }
                else
                {
                    NoTError.setText("Please enter correct number of ticket");
                    jLabel8.setVisible(false);
                    totalAmount.setVisible(false);
                    saveData.setVisible(false);
                }
            }else{
                NoTError.setText("Please Enter Data");
            }
        }
        catch(NumberFormatException Ne)
        {
            NoTError.setText("Please Enter Numeric Data");
            jLabel8.setVisible(false);
            totalAmount.setVisible(false);
            saveData.setVisible(false);
        }
        catch(Exception E)
        {
            JOptionPane.showMessageDialog(this,E,"Warning",JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_calculateTicketPriceActionPerformed

    private void mobileNumberActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mobileNumberActionPerformed
            // TODO add your handling code here:
    }//GEN-LAST:event_mobileNumberActionPerformed

    private void movieInfoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_movieInfoActionPerformed
        // TODO add your handling code here:
        customerNameInfo=customerName.getText();
        customerMobileNoInfo=mobileNumber.getText();
        customerMovieNameInfo=moviesList.getSelectedItem().toString();
        if((customerNameInfo.length())!=0 && (customerMobileNoInfo.length())>=10)
        {
            CNMNError.setText(""); 
            moviesGenres.setVisible(true);
            moviesGenresMovie.setVisible(true);
            jLabel21.setVisible(true);
            dateAvailabeList.setVisible(true);
            dateInfo.setVisible(true);
            String genres=null;
            String fileName="ListMovies.csv";
            ArrayList<ArrayList> listMovies=new ArrayList<ArrayList>();
            try
            {
                Path currRelativePath = Paths.get("");
                String currAbsolutePathString = currRelativePath.toAbsolutePath().toString();
                FileReader readFile=new FileReader(currAbsolutePathString+"/src/Public/"+fileName);
                CSVReader reader =new CSVReader(readFile);
                String [] nextLine;
                //reads one line at a time
                String[] header = reader.readNext();
                while ((nextLine = reader.readNext()) != null)
                {
                    if(nextLine.length>0)
                    {
                        ArrayList<String> showTimeInfo=new ArrayList<String>();
                        for(int i=0;i<nextLine.length;i++)
                        {
                            showTimeInfo.add(nextLine[i]);
                        }
                        listMovies.add(showTimeInfo);
                    }
                }
                for(int i=0;i<listMovies.size();i++)
                {
                    ArrayList<String> movieNames=listMovies.get(i);
                    if(customerMovieNameInfo.equals(movieNames.get(1)))
                    {
                        genres=movieNames.get(2);
                        MovieIdInfo=movieNames.get(0);
                        break;
                    }
                }
                moviesGenresMovie.setText(genres);
                ArrayList<ArrayList> listShow=getShowTime();
                int occurrences = Collections.frequency(listShow,MovieIdInfo);
                int count=0;
                if(listShow.size()>0)
                {
                    for(int i=0;i<listShow.size();i++)
                    {
                        ArrayList<String> showTiming=listShow.get(i);
                        if(MovieIdInfo.equals(showTiming.get(1)))
                        {
                            count++;
                        }
                    }
                    String[] dateArray=new String[count];
                    count=0;
                    for(int i=0;i<listShow.size();i++)
                    {
                        ArrayList<String> showTiming=listShow.get(i);
                        if(MovieIdInfo.equals(showTiming.get(1)))
                        {
                            dateArray[count]=showTiming.get(3);
                            count++;
                        }
                    }
                    DefaultComboBoxModel<String> model = new DefaultComboBoxModel<String>(dateArray);
                    dateAvailabeList.setModel(model);
                }
            }
            catch(FileNotFoundException e)
            {
                System.out.println("File Not found");
            }
            catch(IOException e)
            {
                System.out.println(e.getMessage());
            }
            catch(Exception e)
            {
                System.out.println(e);
            }
        }
        else
        {
            CNMNError.setText("Entered Name or Number is Incorrect"); 
            System.out.println("name or number cannot be empty");
        }
    }//GEN-LAST:event_movieInfoActionPerformed

    private void moviesListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moviesListActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_moviesListActionPerformed

    private void adultTicketActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_adultTicketActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_adultTicketActionPerformed

    private void customerNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_customerNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_customerNameActionPerformed

    private void mobileNumberKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_mobileNumberKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_mobileNumberKeyPressed

    private void printReceiptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printReceiptActionPerformed
        // TODO add your handling code here:
        try{
            String customer_name=customerNameInfo;
            String customer_mobile=customerMobileNoInfo;
            String movie_date=movieDateInfo;
            String movie_time=movieTimeInfo;
            String movie_name=movieName;
            String adultTicket=noOfAdultTicketsInfo;
            String seniorTicket=noOfSeniorTicketsInfo;
            String studentTicket=noOfStudentTicketsInfo;
            String customer_tickets=noOfAdultTicketsInfo;
            String amtPaid=amountPaidByCustomer.getText();
            if(customer_name!=null && customer_mobile!=null && movie_date!=null && movie_time!=null && movie_name!=null)
            {
                Path currRelativePath = Paths.get("");
                String currAbsolutePathString = currRelativePath.toAbsolutePath().toString();
                File file=new File(currAbsolutePathString+"/src/Public/"+customer_name+"_Receipt.txt");
                if (file.createNewFile()) {
                    System.out.println("File created: " + file.getName());
                }
                FileWriter writer = new FileWriter(file);
                writer.write("Customer Name="+customer_name+"\n");
                writer.write("Customer mobile number="+customer_mobile+"\n");
                writer.write("movie Date="+movie_date+"\n");
                writer.write("movie time="+movie_time+"\n");
                writer.write("movie name="+movie_name+"\n");
                writer.write("Number of Adult Tickets="+adultTicket+"\n");
                writer.write("Number of Adult Tickets="+seniorTicket+"\n");
                writer.write("Number of Adult Tickets="+studentTicket+"\n");
                writer.write("amount paid="+amtPaid+"\n");
                writer.close();
                JOptionPane.showMessageDialog(this,"Receipt generated","WARNING",JOptionPane.WARNING_MESSAGE);
                System.out.println("Successfully wrote to the file.");
            }
            else
            {
                JOptionPane.showMessageDialog(this,"Please select The Data","WARNING",JOptionPane.WARNING_MESSAGE);
            }
        }
        catch(IOException e)
        {
            System.out.println(e.getMessage());
        }
        catch(Exception e)
        {
            System.out.println(e.getMessage());
        }
    }//GEN-LAST:event_printReceiptActionPerformed

    private void cancelBookingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelBookingActionPerformed
        // TODO add your handling code here:
        String customer_name=customerNameInfo;
        String customer_mobile=customerMobileNoInfo;
        String movie_date=movieDateInfo;
        String movie_time=movieTimeInfo;
        String movie_ticket_price=adultTicketPriceInfo;
        String customer_tickets=noOfAdultTicketsInfo;
        if(customer_name!=null && customer_mobile!=null && movie_date!=null && movie_time!=null && movie_ticket_price!=null && customer_tickets!=null)
        {
            String amountPaid=(Integer.parseInt(movie_ticket_price)*Integer.parseInt(customer_tickets))+"";
            try
            {
                ArrayList<ArrayList> cancelBooking=getPurchaseDetails();
                int i=0;
                for(i=0;i<cancelBooking.size();i++)
                {
                    ArrayList<String> customerInfo=cancelBooking.get(i);
                    if(customerInfo.get(0).equals(customer_name) && customerInfo.get(1).equals(customer_mobile))
                    {
                        showMovieTimingId=customerInfo.get(2);
                        noOfAdultTicketsInfo=customerInfo.get(3);
                        noOfSeniorTicketsInfo=customerInfo.get(4);
                        noOfStudentTicketsInfo=customerInfo.get(5);
                        break;
                    }
                }
                cancelBooking.remove(i);
                writeData(cancelBooking);
            }
            catch(Exception e)
            {
                System.out.println(e.getMessage());
            }
        }
        else
        {
            JOptionPane.showMessageDialog(this,"Please select The Data","WARNING",JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_cancelBookingActionPerformed

    private void searchGenresActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchGenresActionPerformed
        // TODO add your handling code here:
        String genres=genresFilter.getSelectedItem().toString();
        String fileName="ListMovies.csv";
        ArrayList<ArrayList> listMovies=new ArrayList<ArrayList>();
        try
        {
            Path currRelativePath = Paths.get("");
            String currAbsolutePathString = currRelativePath.toAbsolutePath().toString();
            FileReader readFile=new FileReader(currAbsolutePathString+"/src/Public/"+fileName);
            CSVReader reader =new CSVReader(readFile); 
            String [] nextLine;  
            //reads one line at a time  
            String[] header = reader.readNext();
            while ((nextLine = reader.readNext()) != null)  
            {
                if(nextLine.length>0)
                {
                    ArrayList<String> movieInfo=new ArrayList<String>();  
                    for(int i=0;i<nextLine.length;i++)
                    {
                        movieInfo.add(nextLine[i]);
                    }  
                    listMovies.add(movieInfo);
                }
            }  
            String[] columnNames = { "Movie id", "Movie name", "Genres" };
            //String[][] rowValues=new String[(listMovies.size())][3];
            ArrayList<ArrayList> genresDetailInfo=new ArrayList<ArrayList>();
            for(int i=0;i<listMovies.size();i++) 
            {
                ArrayList<String> values=listMovies.get(i);
                if(values.get(2).equals(genres))
                {
                    genresDetailInfo.add(values);
                }
                for(int j=0;j<values.size();j++)
                {
                    //rowValues[i][j]=values.get(j);
                    String val=values.get(j);
                    //valuesMovies[i]=val;
                    showMovieTable.setValueAt("", i,j);
                }
                //dtm.addRow(valuesMovies);
            }
            for(int i=0;i<genresDetailInfo.size();i++) 
            {
                ArrayList<String> values=genresDetailInfo.get(i);
                for(int j=0;j<values.size();j++)
                {
                    //rowValues[i][j]=values.get(j);
                    String val=values.get(j);
                    //valuesMovies[i]=val;
                    showMovieTable.setValueAt(val, i,j);
                }
                //dtm.addRow(valuesMovies);
            }
        }
        catch(FileNotFoundException e)
        {
            System.out.println("File Not found");
        }
        catch(IOException e)
        {
            System.out.println(e.getMessage());
        }
        catch(Exception e)
        {
            System.out.println(e);
        }
    }//GEN-LAST:event_searchGenresActionPerformed

    private void seniorTicketPriceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_seniorTicketPriceActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_seniorTicketPriceActionPerformed

    private void studentTicketPriceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_studentTicketPriceActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_studentTicketPriceActionPerformed

    private void noOfSeniorTicketsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_noOfSeniorTicketsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_noOfSeniorTicketsActionPerformed

    private void noOfStudentTicketsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_noOfStudentTicketsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_noOfStudentTicketsActionPerformed

    private void availableTicketsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_availableTicketsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_availableTicketsActionPerformed

    private void perSeniorTicketPriceInfoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_perSeniorTicketPriceInfoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_perSeniorTicketPriceInfoActionPerformed

    private void perStudentTicketPriceInfoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_perStudentTicketPriceInfoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_perStudentTicketPriceInfoActionPerformed

    private void purchasedMovieNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_purchasedMovieNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_purchasedMovieNameActionPerformed

    private void searchGenres1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchGenres1ActionPerformed
        // TODO add your handling code here:
        String movieName_detail=movieFilter.getSelectedItem().toString();
        String fileName="ListShowTime.csv";
        ArrayList<ArrayList> listMovies=new ArrayList<ArrayList>();
        try
        {
            Path currRelativePath = Paths.get("");
            String currAbsolutePathString = currRelativePath.toAbsolutePath().toString();
            FileReader readFile=new FileReader(currAbsolutePathString+"/src/Public/"+fileName);
            CSVReader reader =new CSVReader(readFile); 
            String [] nextLine;  
            //reads one line at a time  
            String[] header = reader.readNext();
            while ((nextLine = reader.readNext()) != null)  
            {
                if(nextLine.length>0)
                {
                    ArrayList<String> movieInfo=new ArrayList<String>();  
                    for(int i=0;i<nextLine.length;i++)
                    {
                        movieInfo.add(nextLine[i]);
                    }  
                    listMovies.add(movieInfo);
                }
            }  
            ArrayList<ArrayList> showTimeDetailInfo=new ArrayList<ArrayList>();
            //System.out.println(listMovies);
            for(int i=0;i<listMovies.size();i++) 
            {
                ArrayList<String> values=listMovies.get(i);
                if(values.get(2).equals(movieName_detail))
                {
                    showTimeDetailInfo.add(values);
                }
                for(int j=0;j<values.size();j++)
                {
                    //rowValues[i][j]=values.get(j);
                    String val=values.get(j);
                    //valuesMovies[i]=val;
                    showMovieTimeTable.setValueAt("", i,j);
                }
                //dtm.addRow(valuesMovies);
            }
            for(int i=0;i<showTimeDetailInfo.size();i++) 
            {
                ArrayList<String> values=showTimeDetailInfo.get(i);
                for(int j=0;j<values.size();j++)
                {
                    //rowValues[i][j]=values.get(j);
                    String val=values.get(j);
                    //valuesMovies[i]=val;
                    showMovieTimeTable.setValueAt(val, i,j);
                }
                //dtm.addRow(valuesMovies);
            }
        }
        catch(FileNotFoundException e)
        {
            System.out.println("File Not found");
        }
        catch(IOException e)
        {
            System.out.println(e.getMessage());
        }
        catch(Exception e)
        {
            System.out.println(e);
        }
    }//GEN-LAST:event_searchGenres1ActionPerformed

    public void writeData(ArrayList<ArrayList> arraylist)
    {
        String fileName="PurchaseTicket.csv";
        Path currRelativePath = Paths.get("");
        String currAbsolutePathString = currRelativePath.toAbsolutePath().toString();
        String filePath=(currAbsolutePathString+"/src/Public/"+fileName);
        File file = new File(filePath);
        try {
            // create FileWriter object with file as parameter
            FileWriter outputfile = new FileWriter(file);

            // create CSVWriter object filewriter object as parameter
            CSVWriter writer = new CSVWriter(outputfile);
            // add data to csv
            String[] data1 = {"Customer Name","Cutomer Mobile Number","Movie Show Time id","Number of Adult tickets","Number Of Senior Tickets","Number of Student Tickets","Amount Paid"};
            writer.writeNext(data1);
            for(int i=0;i<arraylist.size();i++)
            {
                ArrayList<String> customerInfo=arraylist.get(i);
                String[] cusInfo={customerInfo.get(0),customerInfo.get(1),customerInfo.get(2),customerInfo.get(3),customerInfo.get(4),customerInfo.get(5),customerInfo.get(6)};
                writer.writeNext(cusInfo);
            }
            // closing writer connection
            writer.close();
            updateShowTimeSlot();
            JOptionPane.showMessageDialog(this,"Booking Canceled.","Ticket Booked",JOptionPane.WARNING_MESSAGE);
            clearField();
        }
        catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }

    public void updateShowTimeSlot()
    {
        String adulttic=noOfAdultTicketsInfo;
        String seniortic=noOfSeniorTicketsInfo;
        String studenttic=noOfStudentTicketsInfo;
        String showId=showMovieTimingId;
        String fileName="ListShowTime.csv";
        ArrayList<ArrayList> listShow=new ArrayList<ArrayList>();
        try
        {
            Path currRelativePath = Paths.get("");
            String currAbsolutePathString = currRelativePath.toAbsolutePath().toString();
            FileReader readFile=new FileReader(currAbsolutePathString+"/src/Public/"+fileName);
            CSVReader reader =new CSVReader(readFile); 
            String [] nextLine;  
            //reads one line at a time  
            String[] header = reader.readNext();
            while ((nextLine = reader.readNext()) != null)  
            {
                if(nextLine.length>0)
                {
                    ArrayList<String> showTimeInfo=new ArrayList<String>();  
                    for(int i=0;i<nextLine.length;i++)
                    {
                        showTimeInfo.add(nextLine[i]);
                    }  
                    listShow.add(showTimeInfo);
                }
            }  
            //String[] columnNames = { "Movie id", "Movie name", "Genres" };
            //String[][] rowValues=new String[(listMovies.size())][3];
            //DefaultTableModel dtm = new DefaultTableModel(3, 0);
            for(int i=0;i<listShow.size();i++) 
            {
                ArrayList<String> values=listShow.get(i);
                if(values.get(0).equals(showId))
                {
                    String slot=values.get(8);
                    int totalSlot=(Integer.parseInt(slot)+Integer.parseInt(adulttic)+Integer.parseInt(seniortic)+Integer.parseInt(studenttic));
                    values.set(8, totalSlot+"");
                }
            }

            UpdateData(listShow);
        }
        catch(FileNotFoundException e)
        {
            System.out.println("File Not found");
        }
        catch(IOException e)
        {
            System.out.println(e.getMessage());
        }
        catch(Exception e)
        {
            System.out.println(e);
        }
    }
    public void clearField()
    {
        customerName.setText(null);
        mobileNumber.setText(null);
        moviesGenresMovie.setText(null);
        adultTicket.setText(null);
        noOfAdultTickets.setText(null);
        totalAmount.setText(null);
        purchasedMovieName.setText(null);
    }
    public ArrayList getShowTime()
    {
        String fileName="ListShowTime.csv";
        ArrayList<ArrayList> listShow=new ArrayList<ArrayList>();
        try
        {
            Path currRelativePath = Paths.get("");
            String currAbsolutePathString = currRelativePath.toAbsolutePath().toString();
            FileReader readFile=new FileReader(currAbsolutePathString+"/src/Public/"+fileName);
            CSVReader reader =new CSVReader(readFile); 
            String [] nextLine;  
            //reads one line at a time  
            String[] header = reader.readNext();
            while ((nextLine = reader.readNext()) != null)  
            {
                if(nextLine.length>0)
                {
                    ArrayList<String> showTimeInfo=new ArrayList<String>();  
                    for(int i=0;i<nextLine.length;i++)
                    {
                        showTimeInfo.add(nextLine[i]);
                    }
                    listShow.add(showTimeInfo);
                }
            }  
        }
        catch(FileNotFoundException e)
        {
            System.out.println("File Not found");
        }
        catch(IOException e)
        {
            System.out.println(e.getMessage());
        }
        catch(Exception e)
        {
            System.out.println(e);
        }
        return listShow;
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Cenima.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Cenima.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Cenima.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Cenima.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Creatanyseske and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Cenima().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel CNMNError;
    private javax.swing.JButton MovieReceiptInfo;
    private javax.swing.JLabel NoTError;
    private javax.swing.JTextField adultTicket;
    private javax.swing.JTextField amountPaidByCustomer;
    private javax.swing.JTextField availableTickets;
    private javax.swing.JTextField bookedDateInfo;
    private javax.swing.JTextField bookedTimeInfo;
    private javax.swing.JButton calculateTicketPrice;
    private javax.swing.JButton cancelBooking;
    private javax.swing.JComboBox<String> customerMobileNumber;
    private javax.swing.JTextField customerName;
    private javax.swing.JButton custumerInfo;
    private javax.swing.JComboBox<String> dateAvailabeList;
    private javax.swing.JButton dateInfo;
    private javax.swing.JButton exit;
    private javax.swing.JComboBox<String> genresFilter;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JPanel listMovieTable;
    private javax.swing.JButton listMovies;
    private javax.swing.JPanel listShowTimePanel;
    private javax.swing.JPanel menu;
    private javax.swing.JTextField mobileNumber;
    private javax.swing.JComboBox<String> movieFilter;
    private javax.swing.JButton movieInfo;
    private javax.swing.JComboBox<String> movieShowTimeIdValues;
    private javax.swing.JLabel moviesGenres;
    private javax.swing.JLabel moviesGenresMovie;
    private javax.swing.JComboBox<String> moviesList;
    private javax.swing.JTextField noOfAdultTickets;
    private javax.swing.JTextField noOfSeniorTickets;
    private javax.swing.JTextField noOfStudentTickets;
    private javax.swing.JTextField perAdultTicketPriceInfo;
    private javax.swing.JTextField perSeniorTicketPriceInfo;
    private javax.swing.JTextField perStudentTicketPriceInfo;
    private javax.swing.JButton printReceipt;
    private javax.swing.JButton purchaseTicket;
    private javax.swing.JPanel purchaseTicketPanel;
    private javax.swing.JTextField purchasedMovieName;
    private javax.swing.JButton resetAllField;
    private javax.swing.JButton saveData;
    private javax.swing.JTextField savedCustomerName;
    private javax.swing.JButton searchGenres;
    private javax.swing.JButton searchGenres1;
    private javax.swing.JTextField seniorTicketPrice;
    private javax.swing.JTable showMovieTable;
    private javax.swing.JTable showMovieTimeTable;
    private javax.swing.JButton showReceipt;
    private javax.swing.JPanel showReceiptPanel;
    private javax.swing.JButton showTiming;
    private javax.swing.JTextField studentTicketPrice;
    private javax.swing.JComboBox<String> timeAvialableList;
    private javax.swing.JButton timeInfo;
    private javax.swing.JLabel totalAmount;
    // End of variables declaration//GEN-END:variables

}
